AWSTemplateFormatVersion: 2010-09-09
Description: network pre requisites

Resources:
    VPC:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: 10.192.0.0/16
        EnableDnsSupport: true
        EnableDnsHostnames: true

    InternetGateway:
      Type: AWS::EC2::InternetGateway

    InternetGatewayAttachment:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
        InternetGatewayId: !Ref InternetGateway
        VpcId: !Ref VPC

    PublicSubnet1:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        AvailabilityZone: !Select [ 0, !GetAZs '' ]
        CidrBlock: 10.192.1.0/24
        MapPublicIpOnLaunch: true

    PublicSubnet2:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        AvailabilityZone: !Select [ 1, !GetAZs '' ]
        CidrBlock: 10.192.2.0/24
        MapPublicIpOnLaunch: true

    PrivateSubnet1:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        AvailabilityZone: !Select [ 0, !GetAZs  '' ]
        CidrBlock: 10.192.11.0/24
        MapPublicIpOnLaunch: false

    PrivateSubnet2:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        AvailabilityZone: !Select [ 1, !GetAZs  '' ]
        CidrBlock: 10.192.12.0/24
        MapPublicIpOnLaunch: false

    NatGateway1EIP:
      Type: AWS::EC2::EIP
      DependsOn: InternetGatewayAttachment
      Properties:
        Domain: vpc

    NatGateway1:
      Type: AWS::EC2::NatGateway
      Properties:
        AllocationId: !GetAtt NatGateway1EIP.AllocationId
        SubnetId: !Ref PublicSubnet1

    PublicRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref VPC

    DefaultPublicRoute:
      Type: AWS::EC2::Route
      DependsOn: InternetGatewayAttachment
      Properties:
        RouteTableId: !Ref PublicRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId: !Ref InternetGateway

    PublicSubnet1RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId: !Ref PublicRouteTable
        SubnetId: !Ref PublicSubnet1

    PublicSubnet2RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId: !Ref PublicRouteTable
        SubnetId: !Ref PublicSubnet2

    PrivateRouteTable1:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref VPC

    DefaultPrivateRoute1:
      Type: AWS::EC2::Route
      Properties:
        RouteTableId: !Ref PrivateRouteTable1
        DestinationCidrBlock: 0.0.0.0/0
        NatGatewayId: !Ref NatGateway1

    PrivateSubnet1RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId: !Ref PrivateRouteTable1
        SubnetId: !Ref PrivateSubnet1

    PrivateSubnet2RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId: !Ref PrivateRouteTable1
        SubnetId: !Ref PrivateSubnet2
        

    NoIngressSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupName: "no-ingress-sg"
        GroupDescription: "Security group with no ingress rule"
        VpcId: !Ref VPC

    WebServerSecurityGroup:
      Type: 'AWS::EC2::SecurityGroup'
      Properties:
        GroupDescription: Enable HTTP from 0.0.0.0/0
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: '80'
            ToPort: '80'
            CidrIp: 0.0.0.0/0
        VpcId: !Ref VPC 

Outputs:
  VPC:
    Value: !GetAtt VPC.VpcId
    Export:
        Name: VpcId 
  PublicSubnet1:
    Value: !GetAtt PublicSubnet1.SubnetId
    Export:
        Name: PublicSubnetId
  PublicSubnet2:
    Value: !GetAtt PublicSubnet2.SubnetId
    Export:
        Name: PublicSubnetId2
  PrivateSubnet1:
    Value: !GetAtt PrivateSubnet1.SubnetId
    Export:
        Name: PrivateSubnetId
  PrivateSubnet2:
    Value: !GetAtt PrivateSubnet2.SubnetId
    Export:
        Name: PrivateSubnetId2
  NoIngressSecurityGroup:
    Value: !GetAtt NoIngressSecurityGroup.GroupId
    Export:
        Name: GroupId
  WebServerSecurityGroup:
    Value: !GetAtt WebServerSecurityGroup.GroupId
    Export:
        Name: WebServerGroupId


            